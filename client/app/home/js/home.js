var Rentmngt;Rentmngt=angular.module("RentmngtApp",["templates","ngMessages"]),Rentmngt.controller("MainCtrl",["$scope","$http","$window",function(n,t,e){}]);
Rentmngt.controller("PropertyRegistration",["$scope","$http","$window","CreateAcctService",function(t,e,n,i){t.Registration={},t.Registration="",t.submitted=!1,t.noFullyConfigured=!1,t.showSpinner=!1,t.disableComponents=!1,t.interacted=function(e){return t.submitted||e.$dirty},t.submit=function(){t.submitted=!0},t.Userlogin=function(){t.showSpinner=!0,i.userLogin(t.user).success(function(e){t.invalidcredential=!1,n.sessionStorage.token=e.token,n.location.href=e.homepage}).error(function(e){t.invalidcredential=!0,t.showSpinner=!1,delete n.sessionStorage.token})},t.Save=function(){"undefined"==typeof t.Registration.Registrationtype?alert("Kindly choose a Registration Type"):(t.Registration.AccessStatus=1,t.Registration.datecreated=(new Date).toISOString(),i.CreatePropertyOwner(t.Registration).success(function(e){t.SuccessStatus=!0,t.ErrorStatus=!1,t.disableComponents=!0}).error(function(e){t.ErrorStatus=!0,t.SuccessStatus=!1,t.disableComponents=!0}))}}]);
Rentmngt.service("CreateAcctService",["$http","$q",function(e,r){var t="/web";this.checkusername=function(n){var c=r.defer();return e.get(t+"/user/"+n).success(function(e){c.reject(e)}).error(function(e){c.resolve(e)}),c.promise},this.CreatePropertyOwner=function(r){return e.post("/web/propertyAccount",r)},this.userLogin=function(r){return e.post("web/Login",r)}}]);
Rentmngt.service("GoogleMapApi",["$window","$q",function(e,i){function n(){var e=document.createElement("script");e.src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places&callback=initMap",document.body.appendChild(e)}var t=i.defer();return e.initMap=function(){t.resolve()},n(),t.promise}]);
Rentmngt.directive("checkUsername",["CreateAcctService",function(e){return{require:"ngModel",link:function(n,r,c,t){t.$asyncValidators.usernameAvailable=function(n){return e.checkusername(n)}}}}]);
Rentmngt.directive("googleautocomplete",["GoogleMapApi",function(e){var o=function(o,t,n,i){function c(){if(void 0===a){var e={types:[],componentRestrictions:{}};p=new google.maps.places.Autocomplete(t[0],e),google.maps.event.addListener(p,"place_changed",l)}}function l(){p.getPlace().geometry?o.$apply(function(){i.$setViewValue(t.val())}):document.getElementById("autocomplete").placeholder="Enter a location"}var a,p;e.then(function(){c()},function(){console.log("promise Rejected map not initialised")})};return{require:"ngModel",link:o}}]);
Rentmngt.directive("matchValidator",[function(){return{require:"ngModel",link:function(t,n,e,i){i.$parsers.push(function(n){return i.$setValidity("match",n==t.$eval(e.matchValidator)),n})}}}]);
//# sourceMappingURL=data:application/json;base64,
